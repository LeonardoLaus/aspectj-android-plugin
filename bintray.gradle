apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
def isJava = project.plugins.hasPlugin(JavaPlugin)
def artifactId = getArtifactId()

task sourcesJar(type: Jar) {
    archivesBaseName = artifactId
    if (isJava) {
        from sourceSets.main.java.srcDirs
    } else {
        from android.sourceSets.main.java.srcDirs
    }
    classifier = 'sources'
}
if (!isJava) {
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') { //我们只需 release 的 javadoc
            task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
                source = variant.javaCompile.source
                if (!javadocSource().isEmpty())
                    source javadocSource()
                classpath = files(variant.javaCompile.classpath.files)
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }
            task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
                classifier = 'javadoc'
                from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
            }
            artifacts {
                archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
                archives sourcesJar
            }
        }
    }
} else {
    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

tasks.withType(Javadoc) {
    options {
        encoding 'UTF-8'
        charSet 'UTF-8'
        links "http://docs.oracle.com/javase/7/docs/api"
        if (!isJava) {
            linksOffline "https://developer.android.com/reference", "${android.sdkDirectory}/docs/reference"
            bootClasspath project.file(android.getBootClasspath().join(File.pathSeparator))
        }
    }
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('-protected')
    options.addStringOption('-splitindex')
}

def getArtifactId() {
    def selfConfig = project.hasProperty('artifactId')
    def artifactId = selfConfig ? project.artifactId : project.name
    println "project artifactId now is ${artifactId}. Use ext {artifactId = xxx} to customizing."
    return artifactId
}

def javadocSource() {
    if (project.hasProperty('javadocSource')) {
        println "javadocSource=${project.javadocSource}"
        return project.javadocSource
    }
    return Collections.emptyList()
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'

                name artifactId
                url config.versions.siteUrl

                licenses {
                    license {
                        name config.license.name
                        url config.license.url
                    }
                }

                developers {
                    developer {
                        id config.developer.id
                        name config.developer.name
                        email config.developer.email
                    }
                }
                scm {
                    connection config.versions.gitUrl
                    developerConnection config.versions.gitUrl
                    url config.versions.siteUrl
                }
            }
        }
    }
}
bintray {
    user = config.bintray.user
    key = config.bintray.apikey
    configurations = ['archives']

    override = true //[Default: false] Whether to override version artifacts already published

    pkg {
        repo = 'Maven'
        name = artifactId
        description = config.versions.desc
        websiteUrl = config.versions.siteUrl
        vcsUrl = config.versions.gitUrl
        issueTrackerUrl = config.versions.issueTrackerUrl
        licenses = ["Apache-2.0"]
        publicDownloadNumbers = true
        githubRepo = config.versions.githubRepo //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file

        dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
        publish = true //[Default: false] Whether version should be auto published after an upload

        version {
            name = project.version?:config.versions.version
            desc = "release ${project.version?:config.versions.version}"
            released = new Date()
            vcsTag = project.version?:config.versions.version
        }
    }
}

println("project.name=${project.name}")